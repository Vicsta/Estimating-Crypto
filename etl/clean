//spark2-shell

def clean(pair : String) : org.apache.spark.sql.DataFrame = {
  val sqlContext = new org.apache.spark.sql.SQLContext(sc)
  val data = sqlContext.read.format("csv").option("header", "true").option("inferSchema", "true").load("/user/pjv253/valhalla/" + pair + ".csv")
  val dropped = data.drop("buy_or_sell").drop("limit_or_market").drop("quantity").drop(data.schema.fields(5).name).na.drop
  val convert_millis = udf((v: Double) => (v * 1000).toLong )
  val converted = dropped.withColumnRenamed("timestamp", "timestamp_seconds").withColumn("timestamp", convert_millis($"timestamp_seconds")).drop("timestamp_seconds")
  val sorted = converted.sort("timestamp")
  var windowed = sorted
  val convert_window = (w:Long) => udf((timestamp: Long) => timestamp / w )
  val partitioned = windowed.withColumn("bucket", convert_window(1000L * 60*60)($"timestamp"))
  val min_bucket = partitioned.select(min("bucket")).first().getLong(0).toInt
  val max_bucket = partitioned.select(max("bucket")).first().getLong(0).toInt
  val schema = List(org.apache.spark.sql.types.StructField("bucket", org.apache.spark.sql.types.LongType, true))
  val range = sc.parallelize(Range(min_bucket, max_bucket, 1)).map(_.toLong).toDF("bucket")
  val bucketed = range.join(partitioned, range("bucket") === partitioned("bucket"), "left_outer").drop(partitioned("bucket")).sort("timestamp")
  var fill = bucketed
  fill = fill.withColumn("partition", convert_window(1000L * 60*60*24*3)($"timestamp"))
  val fields = fill.schema.fields.toList
  fields.foreach((field)=> {
    if(!field.name.equals("partition")) {
      val forward = org.apache.spark.sql.expressions.Window.partitionBy("partition").orderBy("timestamp").rowsBetween(-1000000000, 0)
      val filled_column_last = last(fill(field.name), true).over(forward)
      fill = fill.withColumn(field.name + "_filled", filled_column_last )
      fill = fill.drop(field.name).withColumnRenamed(field.name + "_filled", field.name)
      val filled_column_first = first(fill(field.name)).over(forward)
    }
  })
  val file = "/user/pjv253/valhalla/" + pair + "_CLEAN.csv"
  val path = new org.apache.hadoop.fs.Path(file)
  val fs=org.apache.hadoop.fs.FileSystem.get(sc.hadoopConfiguration)
  fs.delete(path, true)
  fill.write.format("csv").option("header", "true").save(file)
  val fileList = fs.listFiles(path, true)
  val permission = new org.apache.hadoop.fs.permission.FsPermission(org.apache.hadoop.fs.permission.FsAction.ALL,org.apache.hadoop.fs.permission.FsAction.READ_EXECUTE,org.apache.hadoop.fs.permission.FsAction.READ_EXECUTE)
  while (fileList.hasNext()) {
    fs.setPermission(fileList.next().getPath(),permission)
  }
  return sorted
}

val currencies = Array("XXBTZUSD", "XLTCZUSD", "XXRPZUSD", "XETHZUSD")
currencies.foreach(clean)
