#Run the spark shell with csv support.
#spark-shell --packages com.databricks:spark-csv_2.11:1.2.0

def clean(pair : String) : org.apache.spark.sql.DataFrame = {
  val data = sqlContext.read.format("com.databricks.spark.csv")
      .option("header", "true").option("inferSchema", "true").load("/user/pjv253/valhalla/" + pair + ".csv")
  //drop null column and NaN rows and drop empty column
  val dropped = data.na.drop.drop("")
  val convert_millis = udf((v: Double) => (v * 1000).toLong )
  val converted = dropped.withColumnRenamed("timestamp", "timestamp_seconds")
      .withColumn("timestamp", convert_millis($"timestamp_seconds")).drop("timestamp_seconds")
  val sorted = converted.sort("timestamp")
  val convert_window = (w:Long) => {
    udf((timestamp: Long) => timestamp / w )
  }
  var windowed = sorted
  windowed = windowed.withColumn("partition", convert_window(1000L * 60*60*24*30)($"timestamp"))
  val w2 = org.apache.spark.sql.expressions.Window.partitionBy("partition").orderBy("timestamp").rowsBetween(-10,0)
  val ma = windowed.withColumn("ma", avg(windowed("price")).over(w2))

  val file = "/user/pjv253/valhalla/" + pair + "_CLEAN.csv"
  val path = new org.apache.hadoop.fs.Path(file)
  val fs=org.apache.hadoop.fs.FileSystem.get(sc.hadoopConfiguration)
  fs.delete(path, true)
  ma.write.format("com.databricks.spark.csv").option("header", "true").save(file)
  fs.setPermission(path, new org.apache.hadoop.fs.permission.FsPermission(org.apache.hadoop.fs.permission.FsAction.ALL,org.apache.hadoop.fs.permission.FsAction.READ_EXECUTE,org.apache.hadoop.fs.permission.FsAction.READ_EXECUTE))

  return sorted
}


Array("XETHZUSD", "XLTCZUSD", "XXBTZUSD", "XXRPZUSD").foreach(clean)
