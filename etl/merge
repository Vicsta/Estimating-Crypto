#Run the spark shell with csv support.
#spark-shell --packages com.databricks:spark-csv_2.11:1.2.0

def merge(currencies : Array[String]) : org.apache.spark.sql.DataFrame = {
  val dataFrames: Map[String, org.apache.spark.sql.DataFrame] = currencies.map(pair => {
      var data = sqlContext.read.format("com.databricks.spark.csv")
      .option("header", "true").option("inferSchema", "true").load("/user/pjv253/valhalla/" + pair + "_CLEAN.csv")
      val convert_window = (w:Long) => {
        udf((timestamp: Long) => (timestamp / w) * w  )
      }
      data = data.withColumn("timestamp", convert_window(1000L * 60)($"timestamp"))
      data = data.groupBy("timestamp").agg(avg("price"), avg("ema"))
      val fields = data.schema.fields.toList
      fields.foreach((field)=> {
        if(!field.name.equals("timestamp")) {
          data = data.withColumnRenamed(field.name, pair + "_" + field.name)
        }
      })
      (pair, data)
  }).toMap
  val head = dataFrames.head._1
  var merged = dataFrames.head._2
  dataFrames.foreach(pair => {
    val key = pair._1
    val data = pair._2
    if(!key.equals(head)) {
      merged = merged.join(data, merged("timestamp") === data("timestamp"), "fullouter").drop(data("timestamp"))
    }
  })

  val file = "/user/pjv253/valhalla/merged_CLEAN.csv"
  val path = new org.apache.hadoop.fs.Path(file)
  val fs=org.apache.hadoop.fs.FileSystem.get(sc.hadoopConfiguration)
  fs.delete(path, true)
  merged.repartition($"timestamp").coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").save(file)
  val fileList = fs.listFiles(path, true)
  val permission = new org.apache.hadoop.fs.permission.FsPermission(org.apache.hadoop.fs.permission.FsAction.ALL,org.apache.hadoop.fs.permission.FsAction.READ_EXECUTE,org.apache.hadoop.fs.permission.FsAction.READ_EXECUTE)
  while (fileList.hasNext()) {
    fs.setPermission(fileList.next().getPath(),permission)
  }
  return merged
}

val currencies = Array("XETHZUSD", "XLTCZUSD", "XXBTZUSD", "XXRPZUSD")
merge(currencies)
